"""
Django settings for donor_management project.
Generated by 'django-admin startproject' using Django 5.1.4.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os  
from pathlib import Path
from decouple import config
from decouple import Config, RepositoryEnv #  Ensure you're using decouple to read .env variables
from datetime import timedelta
from dotenv import load_dotenv


STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
STRIPE_WEBHOOK_MONTHLY_SUBSCRIPTION_SECRET = os.getenv("STRIPE_WEBHOOK_MONTHLY_SUBSCRIPTION_SECRET")


DEBUG = config("DEBUG", default=False, cast=bool)
#  1. Get the base directory
BASE_DIR = Path(__file__).resolve().parent.parent  #  Project Root Directory or Project base directory

#  2. Load default .env first (for ENVIRONMENT variable at least)
default_env_path = BASE_DIR / ".env_ngrok"
load_dotenv(dotenv_path=default_env_path)  # Load .env first to get ENVIRONMENT

# 3. Now fetch ENVIRONMENT details from the respective env file
ENVIRONMENT = os.getenv("ENVIRONMENT", "local")  # We now trust .env was loaded

#  4. Pick correct environment file based on ENVIRONMENT
env_file_map = {
    "local": ".env",
    "ip": ".env_ip",
    "ngrok": ".env_ngrok",
}
ENV_FILE = BASE_DIR / env_file_map.get(ENVIRONMENT, ".env")

#  5. Now reload the correct environment file
print(f"üîç Loading environment variables from: {ENV_FILE}")
load_dotenv(dotenv_path=ENV_FILE, override=True)  # Override previous values if any

#  6. Now safely read from final .env file using `config`
DEBUG = config("DEBUG", default=False, cast=bool)


BASE_BACKEND_URL = config("BASE_BACKEND_URL", default="https://localhost:8000")
BACKEND_URL = config("BACKEND_URL", default="https://localhost:8000")

#  Load the correct .env file
# config = Config(RepositoryEnv(str(ENV_FILE)))

#  Load the correct .env file
if ENV_FILE.exists():
    config = Config(RepositoryEnv(str(ENV_FILE)))
    print(" $ENV_FILE .env file loaded successfully!")
else:
    print(" WARNING: .env file not found!")

#  Fetch A-LLOWED_HOSTS correctly
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="localhost").split(",")
if 'localhost' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('localhost')
    print("üîç Final ALLOWED_HOSTS from settings.py:", ALLOWED_HOSTS)

EMAIL_BACKEND = config("EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = config("EMAIL_HOST", default="smtpout.secureserver.net")
EMAIL_PORT = config("EMAIL_PORT", cast=int, default=587)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool, default=True)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
# DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="camelfoundation.org@gmail.com")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="nawaz5124@yahoo.com")
REPLY_TO_EMAIL = config("REPLY_TO_EMAIL", default="noreply@XXXXXXXX.com")

#  Now all config() calls will use the correct file!

STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY", default="")
STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET", default=None)


STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY", default="")
STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET", default=None)
STRIPE_WEBHOOK_MONTHLY_SUBSCRIPTION_SECRET = config("STRIPE_WEBHOOK_MONTHLY_SUBSCRIPTION_SECRET", default=None)

# Rest of the settings.py content

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Load SECRET_KEY from .env instead of hardcoding it
SECRET_KEY = config("SECRET_KEY")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "api",  # Your API app
    "rest_framework",  # Django REST Framework
    "rest_framework_simplejwt",  # JWT authentication globally
    "corsheaders",  # CORS Headers for Cross-Origin requests
    "django_extensions",
    "donor_management",  # üëà This is the main app name
    "whitenoise.runserver_nostatic",  # Ensures Whitenoise handles static files
]

# Middleware configuration
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Add CORS middleware at the top
    "whitenoise.middleware.WhiteNoiseMiddleware",  #  WhiteNoise should be added here
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api.middleware.JWTAuthMiddleware",  #  Add this middleware
    # "whitenoise.middleware.WhiteNoiseMiddleware",  # Add this middleware for static files
]

# CORS configuration
#  Allow frontend (React/Next.js) to communicate with backend (Django)

# 1. CORS Settings  
#  Allow credentials (Required for cookies & authentication)
CORS_ALLOW_CREDENTIALS = True  
CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]
CORS_ALLOW_METHODS = ["GET", "POST", "OPTIONS"]
CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS", default="https://localhost:3000").split(",")


#  Cookie and Security Settings
#  Load environment variables dynamically

COOKIE_SECURE = config("COOKIE_SECURE", default="False") == "True"

#  Secure cookie settings
SESSION_COOKIE_SECURE = COOKIE_SECURE  # Ensures session cookies are sent only over HTTPS
CSRF_COOKIE_SECURE = COOKIE_SECURE  # Ensures CSRF cookies are sent only over HTTPS

#  Ensure CSRF_TRUSTED_ORIGINS is properly read, trimmed, and deduplicated

#CSRF_TRUSTED_ORIGINS = list(set(origin.strip() for origin in config("CSRF_TRUSTED_ORIGINS", "").split(",") if origin))
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS").split(",")

CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    "x-csrf-token",
    "x-requested-with",
    "accept",
]

CSP_CONNECT_SRC = ["'self'", config("CSP_CONNECT_SRC", default="https://localhost:8000")]

#  Ensure SESSION_COOKIE settings allow cross-origin use

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_HTTPONLY = True  # Prevents JavaScript access to session cookies (Security best practice)
CSRF_COOKIE_HTTPONLY = True  # Prevents JavaScript access to CSRF cookies

CSRF_USE_SESSIONS = True

#  Strict cookie handling for security
SESSION_COOKIE_SAMESITE = config("SESSION_COOKIE_SAMESITE", default="None")  # Options: Lax, Strict, None
CSRF_COOKIE_SAMESITE = config("CSRF_COOKIE_SAMESITE", default="None")  # SameSite policy

#  Secure Headers
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default="False") == "True"  # Redirects HTTP to HTTPS
SECURE_BROWSER_XSS_FILTER = True  # Enables XSS protection
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevents MIME type sniffing

#  Secure Referrer Policy (Optional)
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"  # Helps prevent CSRF attacks

#  Ensure cookies work across the correct subdomain

ROOT_URLCONF = "donor_management.urls"

# settings.py

# Templates Directory

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates")
        ],  # Global templates directory (optional)
        "APP_DIRS": True,  # Ensures templates inside app folders are found
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "donor_management.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),  #  Fetch database name from .env
        "USER": config("DB_USER"),  #  Fetch database user from .env
        "PASSWORD": config("DB_PASSWORD"),  #  Fetch database password from .env
        "HOST": config("DB_HOST"),  #  Fetch database host from .env
        "PORT": config("DB_PORT"),  #  Fetch database port from .env
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



# Collect all static files from apps into one directory during deployment
STATICFILES_DIRS = [
    #  BASE_DIR / "dashboard/static",  # If needed, add more paths later
]

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  #  Collected static files
STATICFILES_DIRS = [BASE_DIR / "static"]  #  Custom static files

# Enable WhiteNoise for serving static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Postcoder API Configuration
POSTCODER_BASE_API_URL = config("POSTCODER_BASE_API_URL")

LOGS_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOGS_DIR, "application.log"),
            "formatter": "verbose",
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOGS_DIR, "errors.log"),
            "formatter": "verbose",
        },
        #  NEW: Frontend log file handler
        "frontend_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "frontend.log"),
            "when": "midnight",
            "backupCount": 7,
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console", "file"],  # Logs everything to console and file
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "api": {  # Adjust to your Django app name
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["error_file"],
            "level": "ERROR",
            "propagate": False,
        },
        #  NEW: Logger for frontend logs
        "frontend": {
            "handlers": ["frontend_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Enable JWT authentication globally 
# Ensure authentication uses cookies instead of headers

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication', # Uses cookies
        'rest_framework.authentication.BasicAuthentication',  # Optional
        'rest_framework.authentication.SessionAuthentication',  # Uses cookies
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Protects API endpoints
    ),
}

# Allow cookies to be read in authentication
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # Default backend
]

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": config("JWT_SECRET_KEY"),  # Ensure this is securely set
    "AUTH_COOKIE": "access_token",  #  Set JWT Token to be read from cookies
    "AUTH_COOKIE_HTTP_ONLY": True,  #  Secure HTTP-only cookies
    "AUTH_COOKIE_SECURE": False,  # Set to True in production (HTTPS)
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "None", # Or 'Strict' based on needs
}

# JWT authentication globally

# API Service User (Secure Internal API Calls)
API_SERVICE_USERNAME = config("API_SERVICE_USERNAME", default="")  #  Get from .env
API_SERVICE_PASSWORD = config("API_SERVICE_PASSWORD", default="")  #  Get from .env

# Load Backend URL from environment variables
#BASE_BACKEND_URL = config("BASE_BACKEND_URL", default="https://localhost:8000")  # Default for local testing

#BASE_BACKEND_URL = config("BASE_BACKEND_URL", default="https://localhost:8000")
#BACKEND_URL = config("BACKEND_URL", default="https://localhost:8000")

# 1Ô∏è Active environment selector (LOCAL, IP, PROD)
ACTIVE_COOKIE_DOMAIN = config("ACTIVE_COOKIE_DOMAIN", default="LOCAL")

# 2Ô∏è Define domain values for each environment
COOKIE_DOMAIN_MAP = {
    "LOCAL": config("COOKIE_DOMAIN_LOCAL", default="localhost"),
    "IP": config("COOKIE_DOMAIN_IP", default="localhost"),
    "PROD": config("COOKIE_DOMAIN_PROD", default="cftdomaap-dev.camelfoundation.org"),
}

# 3Ô∏è Use the correct domain dynamically
COOKIE_DOMAIN = COOKIE_DOMAIN_MAP.get(ACTIVE_COOKIE_DOMAIN, "localhost")

# 4Ô∏è Other cookie settings (optional but recommended)
COOKIE_SECURE = config("COOKIE_SECURE", default=False, cast=bool)  # True for HTTPS
COOKIE_SAMESITE = config("COOKIE_SAMESITE", default="None")
COOKIE_PATH = config("COOKIE_PATH", default="/")



# 5Ô∏è Debug log (optional)
print(f"üîß Cookie Domain: {COOKIE_DOMAIN}, Secure: {COOKIE_SECURE}, SameSite: {COOKIE_SAMESITE}")
if config("SHOW_CONFIG_SUMMARY", default=False, cast=bool):
    print(f"""
    üîß Django Configuration Summary:
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # Environment Variables
    ENVIRONMENT             : {ENVIRONMENT}
    ACTIVE_COOKIE_DOMAIN    : {ACTIVE_COOKIE_DOMAIN}
    DEBUG:                  : {DEBUG}    
    BASE_BACKEND_URL        : {BASE_BACKEND_URL}
    BACKEND_URL             : {BACKEND_URL}
    ALLOWED_HOSTS           : {ALLOWED_HOSTS}
    COOKIE_DOMAIN           : {COOKIE_DOMAIN}
    COOKIE_DOMAIN_LOCAL     : {config("COOKIE_DOMAIN_LOCAL", default="")}
    COOKIE_DOMAIN_IP        : {config("COOKIE_DOMAIN_IP", default="")}
    COOKIE_DOMAIN_PROD      : {config("COOKIE_DOMAIN_PROD", default="")}
    COOKIE_SECURE           : {COOKIE_SECURE}
    COOKIE_SAMESITE         : {COOKIE_SAMESITE}
    COOKIE_PATH             : {COOKIE_PATH}
    API_SERVICE_USERNAME    : {API_SERVICE_USERNAME}
    API_SERVICE_PASSWORD    : {config("API_SERVICE_PASSWORD", default=" hidden")}
    POSTCODER_BASE_API_URL  : {POSTCODER_BASE_API_URL}
    SHOW_CONFIG_SUMMARY     : {config("SHOW_CONFIG_SUMMARY", default=False)}
    
    # Security & Middleware
    CSRF_TRUSTED_ORIGINS    : {CSRF_TRUSTED_ORIGINS}
    AUTHENTICATION_BACKENDS : {AUTHENTICATION_BACKENDS}
    CSP_CONNECT_SRC         : {CSP_CONNECT_SRC}
    SECURE_REFERRER_POLICY  : {SECURE_REFERRER_POLICY}
    SECURE_CONTENT_TYPE_NOSNIFF : {SECURE_CONTENT_TYPE_NOSNIFF}
    SECURE_BROWSER_XSS_FILTER   : {SECURE_BROWSER_XSS_FILTER}
    SECURE_SSL_REDIRECT         : {SECURE_SSL_REDIRECT}

    # Cookies & Sessions
    CSRF_COOKIE_SAMESITE    : {CSRF_COOKIE_SAMESITE}
    SESSION_COOKIE_SAMESITE : {SESSION_COOKIE_SAMESITE}
    CSRF_COOKIE_HTTPONLY    : {CSRF_COOKIE_HTTPONLY}
    SESSION_COOKIE_HTTPONLY : {SESSION_COOKIE_HTTPONLY}
    SESSION_COOKIE_SECURE   : {COOKIE_SECURE}
    CSRF_COOKIE_SECURE      : {COOKIE_SECURE}
    SESSION_ENGINE          : {SESSION_ENGINE}

    # Misc
    DEFAULT_AUTO_FIELD      : {DEFAULT_AUTO_FIELD}
    WSGI_APPLICATION        : {WSGI_APPLICATION}

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    """)

print("DEBUG ENV FILE VALUE ACTIVE_COOKIE_DOMAIN =", config("ACTIVE_COOKIE_DOMAIN"))

ACTIVE_COOKIE_DOMAIN = config("ACTIVE_COOKIE_DOMAIN", default="LOCAL")
